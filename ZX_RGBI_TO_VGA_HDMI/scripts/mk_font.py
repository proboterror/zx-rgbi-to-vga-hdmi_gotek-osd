# mk_font.py
#
# Translate Font BDF file into a C header.
# 
# Written & released by Keir Fraser <keir.xen@gmail.com>
# 
# This is free and unencumbered software released into the public domain.
# See the file COPYING for more details, or visit <http://unlicense.org>.

import re, sys
import array

# Range of char codes we are interested in
first = 0x20
last = 0xf2 # Inclide non-ASCII alphabet letters (and pseudographic symbols) from code page 866.

# CP866(Russian) to Unicode conversion table
uc866 = array.array(
    'I',
    [0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
    0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
    0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
    0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
    0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
    0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B, 0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
    0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
    0x0401, 0x0451, 0x0404, 0x0454, 0x0407, 0x0457, 0x040E, 0x045E, 0x00B0, 0x2219, 0x00B7, 0x221A, 0x2116, 0x00A4, 0x25A0, 0x00A0]
);

def main(argv):
    in_f = open(argv[1], "r")
    out_f = open(argv[2] + ".c", "w", encoding='utf-8')
    out_f.write("/* Autogenerated by " + argv[0] + " */\n")
    glyphs = {}
    # Find font size
    for line in in_f:
        match = re.match("^FONTBOUNDINGBOX ([0-9]+) ([0-9]+) ([0-9]+) ([-0-9]+)", line)
        if match:
            break
    width = int(match.group(1))
    height = int(match.group(2))
    y_base = int(match.group(4))
    gap = 16 - height
    tgap = gap // 2
    bgap = gap - tgap
    out_f.write("const uint8_t %s[] aligned(4) = {\n" % argv[2])
    for line in in_f:
        # Look for a new character encoding
        match = re.match("^ENCODING ([0-9]+)", line)
        #match = re.match("[ \t]*([A-Za-z0-9-]+)[ \t]*=[ \t]*"
        #                 "([A-Za-z0-9-]+|\".*\")", line)
        if not match:
            continue
        # Extract the decimal character code point
        code = int(match.group(1))
        # Process UNICODE DBCS symbols mapped to code page 866 non-ASCII range (0x80-0xFF).
        # Note: only bdf fonts with CHARSET_REGISTRY = "ISO10646" (UCS) supported.
        if code in uc866:
            code = uc866.index(code) + 0x80
        # Skip uninteresting code points
        if code < first or code > last:
            continue
        # This script assumes the char set is in code-point order
        # Scan for start of bitmap data
        x_shift = 0
        top_space = 0
        bottom_space = 0
        for line in in_f:
            bbx = re.match("^BBX ([0-9]+) ([0-9]+) ([0-9]+) ([-0-9]+)", line)
            if bbx:
                x_shift = int(bbx.group(3))
                y_height = int(bbx.group(2))
                y_shift = int(bbx.group(4))
                bottom_space = y_shift - y_base
                top_space = height - (bottom_space + y_height)
            if re.match("BITMAP", line):
                break
        # Process bitmap data up to end-char
        char = []
        top_space += tgap
        for i in range(top_space):
            char.append(0)
        for line in in_f:
            if re.match("ENDCHAR", line):
                break
            match = re.match("([0-9A-F]+)", line)
            char.append(int(match.group(1), 16) >> x_shift)
        bottom_space += bgap
        for i in range(bottom_space):
            char.append(0)

        glyphs[code] = char;

    # Check if all ASCII symbols are present
    for code in range(0x20, 0x7F):
        assert code in glyphs

    for code in range(first, last):
        char = {}
        if code in glyphs:
            char = glyphs[code]
        else:
            char = glyphs[ord('?')];
        # Convert row-wise data to column-wise
        while char:
            out_f.write("    ")
            mask = 0x80
            for i in range(width):
                col = 0
                for j in range(8):
                    col //= 2
                    if char[j] & mask:
                        col = col + 0x80
                out_f.write("0x%02x, " % (col))
                mask //= 2
            char = char[8:]
            if not char:
                out_f.write(" /* '%c' %s */" % (code if code < 0x80 else chr(uc866[code - 0x80]), hex(code)))
            out_f.write("\n")
    out_f.write("};\n");
if __name__ == "__main__":
    main(sys.argv)
